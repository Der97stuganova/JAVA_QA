package andersen.author_today;
// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import org.junit.Assert;
import org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;

import org.junit.jupiter.api.Assertions;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;

public class AuthorTestThree {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    System.setProperty("webdriver.chrome.driver", "D:\\Downloads\\tools\\chromedriver_win32\\chromedriver");
    driver = new ChromeDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void AuthorTestThree() {
    driver.get("https://author.today/");
    driver.manage().window().setSize(new Dimension(688, 680));
    driver.findElement(By.xpath("//a[contains(text(),\'Войти\')]")).click();
    driver.findElement(By.name("Login")).click();
    driver.findElement(By.name("Login")).sendKeys("aderstuganova@gmail.com");
    driver.findElement(By.name("Password")).click();
    driver.findElement(By.name("Password")).sendKeys("19972002");
    Assert.assertEquals("Ошибка при вводе логина", "aderstuganova@gmail.com", driver.findElement(By.name("username")).getAttribute("value"));
    Assert.assertEquals("Ошибка при вводе пароля", "19972002", driver.findElement(By.name("password")).getAttribute("value"));
    driver.findElement(By.cssSelector(".btn-primary")).click();
    driver.findElement(By.cssSelector(".icon-bell-o")).click();
    Assertions.assertEquals(driver.findElement(By.linkText("Аномальный наследник. Том 1 и Том 2")).getText(),"Аномальный наследник. Том 1 и Том 2");
    driver.findElement(By.linkText("Читать книгу")).click();
    {
      WebElement element = driver.findElement(By.id("reader"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).clickAndHold().perform();
    }
    {
      WebElement element = driver.findElement(By.id("reader"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).perform();
    }
    {
      WebElement element = driver.findElement(By.id("reader"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).release().perform();
    }
    driver.findElement(By.cssSelector(".icon-list")).click();
    driver.findElement(By.cssSelector("li:nth-child(6)")).click();
    driver.findElement(By.cssSelector(".icon-list")).click();
    driver.findElement(By.cssSelector("li:nth-child(27)")).click();
    driver.findElement(By.cssSelector(".btn-only-icon-xs:nth-child(1)")).click();
    driver.findElement(By.cssSelector(".contents li:nth-child(1)")).click();
    driver.findElement(By.cssSelector(".icon-home")).click();
  }
}
